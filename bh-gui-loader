if BROKENHUBLOADED then error("Broken-Hub is already loaded.") end
if getgenv then getgenv().BROKENHUBLOADED = true end
local BHLoader = Instance.new("ScreenGui")
BHLoader.IgnoreGuiInset = true
local Frame = Instance.new("ImageLabel")
local ImageLabel = Instance.new("ImageLabel")
local Broken = Instance.new("ImageLabel")
local background = Instance.new("Frame")
local Gradient = Instance.new("UIGradient")
local orange = Instance.new("Frame")
local Gradient_2 = Instance.new("UIGradient")
local LBackground = Instance.new("ImageLabel")
local LoaderAnim = Instance.new("ImageLabel")
local RotatingLoader = Instance.new("ImageLabel")
local Loaded = Instance.new("ImageLabel")
local NotSupported = Instance.new("ImageLabel")
local TextToShow = Instance.new("TextLabel")

--Properties:

BHLoader.Name = "BHLoader"
BHLoader.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
BHLoader.ResetOnSpawn = false

Frame.Name = "Frame"
Frame.Parent = BHLoader
Frame.AnchorPoint = Vector2.new(0.5, 0.5)
Frame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Frame.BackgroundTransparency = 1.000
Frame.ClipsDescendants = true
Frame.Position = UDim2.new(0.499306232, 0, 0.499005973, 0)
Frame.Size = UDim2.new(0, 307, 0, 165)
Frame.ZIndex = 100
Frame.Image = "rbxassetid://3570695787"
Frame.ImageColor3 = Color3.fromRGB(15, 15, 15)
Frame.ScaleType = Enum.ScaleType.Slice
Frame.SliceCenter = Rect.new(100, 100, 100, 100)
Frame.SliceScale = 0.120

ImageLabel.Parent = Frame
ImageLabel.AnchorPoint = Vector2.new(0.5, 0.5)
ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ImageLabel.BackgroundTransparency = 1.000
ImageLabel.Position = UDim2.new(0.499290437, 0, 0.497659624, 0)
ImageLabel.Size = UDim2.new(0, 290, 0, 161)
ImageLabel.ZIndex = 200
ImageLabel.Image = "rbxassetid://7284981787"
ImageLabel.ImageColor3 = Color3.fromRGB(0, 0, 0)

Broken.Name = "Broken"
Broken.Parent = Frame
Broken.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Broken.BackgroundTransparency = 1.000
Broken.Size = UDim2.new(0, 307, 0, 165)
Broken.ZIndex = 150
Broken.Image = "rbxassetid://7285146452"
Broken.ImageColor3 = Color3.fromRGB(0, 0, 0)
Broken.ImageTransparency = 1.000

background.Name = "background"
background.Parent = BHLoader
background.BackgroundColor3 = Color3.fromRGB(243, 243, 255)
background.BorderColor3 = Color3.fromRGB(243, 243, 255)
background.BorderSizePixel = 0
background.Size = UDim2.new(1, 0, 1, 0)
background.ZIndex = 60

Gradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(16, 16, 17)), ColorSequenceKeypoint.new(0.37, Color3.fromRGB(24, 26, 31)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(17, 23, 35))}
Gradient.Rotation = 270
Gradient.Name = "Gradient"
Gradient.Parent = background

orange.Name = "orange"
orange.Parent = background
orange.BackgroundColor3 = Color3.fromRGB(243, 243, 255)
orange.BorderColor3 = Color3.fromRGB(243, 243, 255)
orange.BorderSizePixel = 0
orange.Position = UDim2.new(-0.000366747379, 0, -0.00198807148, 0)
orange.Size = UDim2.new(1, 0, 1, 0)
orange.ZIndex = 61

Gradient_2.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 126, 35)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 0, 0))}
Gradient_2.Transparency = NumberSequence.new{NumberSequenceKeypoint.new(0.00, 0.72), NumberSequenceKeypoint.new(0.36, 1.00), NumberSequenceKeypoint.new(1.00, 1.00)}
Gradient_2.Name = "Gradient"
Gradient_2.Parent = orange

LBackground.Name = "LBackground"
LBackground.Parent = BHLoader
LBackground.AnchorPoint = Vector2.new(0.5, 0.5)
LBackground.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
LBackground.BackgroundTransparency = 1.000
LBackground.ClipsDescendants = true
LBackground.Position = UDim2.new(0.5, 0, 0.5, 0)
LBackground.Size = UDim2.new(0, 175, 0, 162)
LBackground.Visible = false
LBackground.ZIndex = 49
LBackground.Image = "rbxassetid://3570695787"
LBackground.ImageColor3 = Color3.fromRGB(24, 24, 24)
LBackground.ScaleType = Enum.ScaleType.Slice
LBackground.SliceCenter = Rect.new(100, 100, 100, 100)
LBackground.SliceScale = 0.120

LoaderAnim.Name = "LoaderAnim"
LoaderAnim.Parent = LBackground
LoaderAnim.AnchorPoint = Vector2.new(0.5, 0.5)
LoaderAnim.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
LoaderAnim.BackgroundTransparency = 1.000
LoaderAnim.ClipsDescendants = true
LoaderAnim.Position = UDim2.new(0.5, 0, 0.5, 0)
LoaderAnim.Size = UDim2.new(0, 161, 0, 150)
LoaderAnim.ZIndex = 50
LoaderAnim.Image = "rbxassetid://3570695787"
LoaderAnim.ImageColor3 = Color3.fromRGB(33, 33, 33)
LoaderAnim.ScaleType = Enum.ScaleType.Slice
LoaderAnim.SliceCenter = Rect.new(100, 100, 100, 100)
LoaderAnim.SliceScale = 0.120

RotatingLoader.Name = "RotatingLoader"
RotatingLoader.Parent = LoaderAnim
RotatingLoader.AnchorPoint = Vector2.new(0.5, 0.5)
RotatingLoader.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
RotatingLoader.BackgroundTransparency = 1.000
RotatingLoader.Position = UDim2.new(0.5, 0, 0.5, 0)
RotatingLoader.Size = UDim2.new(0, 110, 0, 113)
RotatingLoader.ZIndex = 60
RotatingLoader.Image = "rbxassetid://2869102474"
RotatingLoader.ScaleType = Enum.ScaleType.Fit

Loaded.Name = "Loaded"
Loaded.Parent = LoaderAnim
Loaded.AnchorPoint = Vector2.new(0.5, 0.5)
Loaded.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Loaded.BackgroundTransparency = 1.000
Loaded.Position = UDim2.new(0.5, 0, 0.5, 0)
Loaded.Size = UDim2.new(0, 110, 0, 113)
Loaded.ZIndex = 60
Loaded.Image = "rbxassetid://1682537696"
Loaded.ScaleType = Enum.ScaleType.Fit

NotSupported.Name = "NotSupported"
NotSupported.Parent = LoaderAnim
NotSupported.AnchorPoint = Vector2.new(0.5, 0.5)
NotSupported.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
NotSupported.BackgroundTransparency = 1.000
NotSupported.Position = UDim2.new(0.5, 0, 0.5, 0)
NotSupported.Size = UDim2.new(0, 110, 0, 113)
NotSupported.ZIndex = 60
NotSupported.Image = "rbxassetid://5107154082"
NotSupported.ScaleType = Enum.ScaleType.Fit

TextToShow.Name = "TextToShow"
TextToShow.Parent = LoaderAnim
TextToShow.AnchorPoint = Vector2.new(0.5, 0.5)
TextToShow.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextToShow.BackgroundTransparency = 1.000
TextToShow.Position = UDim2.new(0.496894419, 0, 0.936666667, 0)
TextToShow.Size = UDim2.new(0, 149, 0, 18)
TextToShow.ZIndex = 55
TextToShow.Font = Enum.Font.SciFi
TextToShow.Text = "This game is not supported!"
TextToShow.TextColor3 = Color3.fromRGB(255, 0, 0)
TextToShow.TextScaled = true
TextToShow.TextSize = 14.000
TextToShow.TextWrapped = true

-- Scripts:

local function VKIXQYI_fake_script() -- BHLoader.LocalScript 
	local script = Instance.new('LocalScript', BHLoader)

	script.Parent.Parent = game:GetService("CoreGui")
	local TweenService = game:GetService("TweenService")
	local Object = script.Parent -- The object you want to tween.
	
	local tweenInfo = TweenInfo.new(
		1, -- The time the tween takes to complete
		Enum.EasingStyle.Quint, -- The tween style.
		Enum.EasingDirection.Out, -- EasingDirection
		0, -- How many times you want the tween to repeat. If you make it less than 0 it will repeat forever.
		false, -- Reverse?
		0 -- Delay
	)
	
	
	-- Blur size should be 24.
	local blur = Instance.new("BlurEffect")
	script.Parent.background.BackgroundTransparency = 1
	for i,v in pairs(script.Parent.background:GetChildren()) do
		if v.Name == "orange" then
			v.BackgroundTransparency = 1
		end
	end
	blur.Size = 0
	blur.Parent = game.Workspace.CurrentCamera
	blur.Name = "BHINTRO"
	script.Parent.Enabled = true
	local frame = script.Parent.Frame
	local ogFrameSize = frame.Size
	frame.Size = UDim2.new(0,0,0,0)
	local logo = script.Parent.Frame.ImageLabel
	frame.ImageTransparency = 1
	logo.ImageTransparency = 1
	wait(1) -- First animation start
	game.StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, true)
	local PlayerModule = require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"))
	local Controls = PlayerModule:GetControls()
	Controls:Disable()
	function tweenpossync(uiobject, speed, finaludim)
		uiobject:TweenPosition(finaludim, 'Out', 'Quint', speed)
		wait(speed + 0.1)
	end
	function tweenposasync(uiobject, speed, finaludim)
		uiobject:TweenPosition(finaludim, 'Out', 'Quint', speed)
	end
	function fallEffect(uiObject)
		uiObject:TweenPosition(UDim2.new(0.5, 0,1, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quart, 5)
		for i=0, 24 do
			blur.Size = blur.Size - 1
			frame.ImageTransparency = frame.ImageTransparency + 0.0416
			logo.ImageTransparency = logo.ImageTransparency + 0.0416
			script.Parent.Frame.Broken.ImageTransparency = script.Parent.Frame.Broken.ImageTransparency + 0.0416
			wait()
			script.Parent.background.BackgroundTransparency = script.Parent.background.BackgroundTransparency + 0.0416
			for i,v in pairs(script.Parent.background:GetChildren()) do
				if v.Name == "orange" then
					v.BackgroundTransparency = v.BackgroundTransparency + 0.5
				end
			end
		end
	end
	function tweensizesync(uiobject, speed, finaludim)
		uiobject:TweenSize(finaludim, 'Out', 'Quint', speed)
		wait(speed + 0.1)
	end
	function tweensizeasync(uiobject, speed, finaludim)
		uiobject:TweenSize(finaludim, 'Out', 'Quint', speed)
	end
	for i=0,24 do
		blur.Size = blur.Size + 1
		script.parent.background.BackgroundTransparency = script.parent.background.BackgroundTransparency - 0.042
		for i,v in pairs(script.parent.background:GetChildren()) do
			if v.Name == "orange" then
				v.BackgroundTransparency = v.BackgroundTransparency - 0.042
			end
		end
		wait()
	end
	tweensizeasync(frame, 1, ogFrameSize)
	for i=0,20 do
		wait()
		frame.ImageTransparency = frame.ImageTransparency - 0.05
		logo.ImageTransparency = logo.ImageTransparency - 0.05
	end
	wait(5) -- First animation end
	for i=0,10 do
		wait()
		script.Parent.Frame.Broken.ImageTransparency = script.Parent.Frame.Broken.ImageTransparency - .1
	end
	for i=0,15 do
		wait()
		frame.Rotation = frame.Rotation + 1
	end
	for i=0,5 do
		wait()
		frame.Rotation = frame.Rotation - 1
	end
	for i=0,5 do
		wait()
		frame.Rotation = frame.Rotation + 1
	end
	for i=0,5 do
		wait()
		frame.Rotation = frame.Rotation - 1
	end
	for i=0,10 do
		wait()
		frame.Rotation = frame.Rotation + 1
	end
	script.Parent.LBackground.LoaderAnim.Visible = true
	script.Parent.LBackground.Visible = true
	Controls:Enable()
	fallEffect(frame)
	loadstring(game:HttpGet('https://raw.githubusercontent.com/iShield2005/scripts/master/bh-nogui-loader'))()
	
	
	
end
coroutine.wrap(VKIXQYI_fake_script)()
local function DENJ_fake_script() -- Gradient_2.Animate 
	local script = Instance.new('LocalScript', Gradient_2)

	local button = script.Parent
	local gradient = script.Parent
	local ts = game:GetService("TweenService")
	local ti = TweenInfo.new(3, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
	local offset = {Offset = Vector2.new(1, 0)}
	local create = ts:Create(gradient, ti, offset)
	local startingPos = Vector2.new(-1, 0)
	local list = {} --list of random colors (we'll be generating them shortly after)
	local s, kpt = ColorSequence.new, ColorSequenceKeypoint.new
	local counter = 0 --count the last table index we just indexed/last gradient color reference
	local status = "down" --[[there will be two groups of if statements (one above and one below). 
	It glitches out some times and runs the same group multiple times, so we need this. ]] 
	gradient.Offset = startingPos --reset the offset of the gradient
	
	local function rainbowColors()
	
	    --[[HSV uses values 0-1, but we'll use until 255 and divide later to 
	    better control the colors.]]
	
		local sat, val = 255, 255 
	
		for i = 1, 15 do --15 is a multiple of 255
	
			local hue = i * 17 --255/15 = 17
			table.insert(list, Color3.fromHSV(hue / 255, sat / 255, val / 255)) --divide by 255 to be in range of 0-1
	
		end
	
	end
	
	rainbowColors() --add to the list table
	
	--set up the first gradient 
	gradient.Color = s({
	
		kpt(0, list[#list]),
		kpt(0.5, list[#list - 1]),
		kpt(1, list[#list - 2])
	
	})
	
	counter = #list --max indexed is #list, which is 10 in this instance
	local function animate()
	
		create:Play()
		create.Completed:Wait() --wait for tween completion
		gradient.Offset = startingPos 
		gradient.Rotation = 180 --flip time!
	
	    --[[#list - 1 because we have 3 key points, 1 will be preserved from 
	    the previous tween, while the other 2 are new. We need to make 
	    sure that indexing something beyond #list doesn't happen as it will 
	    throw an error. In this instance, it will be 9, 10, and instead of it looking
	    for 11, it will go back to 1.]]
		if counter == #list - 1 and status == "down" then
	
			gradient.Color = s({
	
				kpt(0, gradient.Color.Keypoints[1].Value), --preserve previous color, which we'll be able to see
				kpt(0.5, list[#list]), --change this color behind the scenes!
				kpt(1, list[1]) --change this color behind the scenes!
	
			})
	
			counter = 1 --last index is 1 i.e. list[1]
			status = "up" --the upper section already ran, time for the lower!
	
		elseif counter == #list and status == "down" then --if the current counter is exactly 10 (in this instance), then it will go back to 1 and 2
	
			gradient.Color = s({
	
				kpt(0, gradient.Color.Keypoints[1].Value),
				kpt(0.5, list[1]),
				kpt(1, list[2])
	
			})
	
			counter = 2
			status = "up"
	
		elseif counter <= #list - 2 and status == "down" then  --in all other cases, when couter is 1-8
	
			gradient.Color = s({
	
				kpt(0, gradient.Color.Keypoints[1].Value),
				kpt(0.5, list[counter + 1]), --one color over
				kpt(1, list[counter + 2]) --two colors over
	
			})
	
			counter = counter + 2
			status = "up"
	
		end
	
		create:Play()
		create.Completed:Wait()
		gradient.Offset = startingPos
		gradient.Rotation = 0 --flip time again!
	
		if counter == #list - 1 and status == "up" then --same as before, really, but instead of "down", it's "up", since the upper section already ran
	
			gradient.Color = s({
	
				--descending order because now it's rotation 0
				kpt(0, list[1]), --1
				kpt(0.5, list[#list]), --10
				kpt(1, gradient.Color.Keypoints[3].Value) --put this at #3 because we just flipped rotation, so this color will be at the opposite side
	
			})
	
			counter = 1
			status = "down" --below section already ran, back to the top!
	
		elseif counter == #list and status == "up" then
	
			gradient.Color = s({
	
				kpt(0, list[2]), --2
				kpt(0.5, list[1]), --1
				kpt(1, gradient.Color.Keypoints[3].Value) --10
	
			})
	
			counter = 2
			status = "down"
	
		elseif counter <= #list - 2 and status == "up" then --in all other cases like before
	
			gradient.Color = s({
	
				kpt(0, list[counter + 2]), 
				kpt(0.5, list[counter + 1]), 
				kpt(1, gradient.Color.Keypoints[3].Value) 
	
			})
	
			counter = counter + 2
			status = "down"
	
		end
	
		animate() --call the function inside of itself, so that it runs indefinitely
	
	end
	repeat
		wait()
	until script.Parent.Parent.Parent.Parent.background.BackgroundTransparency < 1
	wait(1)
	animate() --call the function initially 
end
coroutine.wrap(DENJ_fake_script)()
local function LNUV_fake_script() -- RotatingLoader.LocalScript 
	local script = Instance.new('LocalScript', RotatingLoader)

	while wait() do
		script.Parent.Rotation = script.Parent.Rotation + 5
	end
end
coroutine.wrap(LNUV_fake_script)()
local function YHQKGOR_fake_script() -- LoaderAnim.LoadedAnim 
	local script = Instance.new('LocalScript', LoaderAnim)

	-- Pre-Variables
	local loaded = script.Parent.Loaded
	local allBackground = script.Parent.Parent.Parent.LBackground
	loaded.Size = UDim2.new(0,0,0)
	loaded.Visible = false
	loaded.ImageTransparency = 1
	-- Waiter
	repeat
		wait()
	until game.Workspace:FindFirstChild("BHDoLoadedAnimation")
	print("Doing loaded.")
	if game.Workspace:FindFirstChild("BHDoLoadedAnimation") then
		game.Workspace:FindFirstChild("BHDoLoadedAnimation"):Destroy()
		-- Variables
		local rotatingLoader = script.Parent.RotatingLoader
		-- Functions
		function tweenpossync(uiobject, speed, finaludim)
			uiobject:TweenPosition(finaludim, 'Out', 'Quint', speed)
			wait(speed + 0.1)
		end
		function tweenposasync(uiobject, speed, finaludim)
			uiobject:TweenPosition(finaludim, 'Out', 'Quint', speed)
		end
		function tweensizesync(uiobject, speed, finaludim)
			uiobject:TweenSize(finaludim, 'Out', 'Quint', speed)
			wait(speed + 0.1)
		end
		function tweensizeasync(uiobject, speed, finaludim)
			uiobject:TweenSize(finaludim, 'Out', 'Quint', speed)
		end
		-- Animation
		for i=0,10 do
			wait()
			rotatingLoader.ImageTransparency = rotatingLoader.ImageTransparency + .1
		end
		loaded.Visible = true
		tweensizeasync(loaded, 1, UDim2.new(0, 110,0, 113))
		for i=0,10 do
			wait()
			loaded.ImageTransparency = loaded.ImageTransparency - .1
		end
		wait(2)
		tweensizesync(allBackground,1,UDim2.new(0,0,0))
		script.Parent.Parent.Parent:Destroy()
	else
		game.Players.LocalPlayer:Kick("Unknown error!")
	end
end
coroutine.wrap(YHQKGOR_fake_script)()
local function JCNTI_fake_script() -- LoaderAnim.NotSupportedAnim 
	local script = Instance.new('LocalScript', LoaderAnim)

	-- Pre-Variablesss
	local errorIcon = script.Parent.NotSupported
	local ogErrorIconSize = errorIcon.Size
	local allBackground = script.Parent.Parent.Parent.LBackground
	local textToShowTextLabel = script.Parent.TextToShow
	textToShowTextLabel.TextTransparency = 1
	errorIcon.Size = UDim2.new(0,0,0)
	errorIcon.Visible = false
	errorIcon.ImageTransparency = 1
	-- Waiter
	repeat
		wait()
	until game.Workspace:FindFirstChild("BHDoNotSupportedAnimation")
	print("Not supported.")
	if game.Workspace:FindFirstChild("BHDoNotSupportedAnimation") then
		game.Workspace:FindFirstChild("BHDoNotSupportedAnimation"):Destroy()
		-- Variables
		local rotatingLoader = script.Parent.RotatingLoader
		-- Functions
		function tweenpossync(uiobject, speed, finaludim)
			uiobject:TweenPosition(finaludim, 'Out', 'Quint', speed)
			wait(speed + 0.1)
		end
		function tweenposasync(uiobject, speed, finaludim)
			uiobject:TweenPosition(finaludim, 'Out', 'Quint', speed)
		end
		function tweensizesync(uiobject, speed, finaludim)
			uiobject:TweenSize(finaludim, 'Out', 'Quint', speed)
			wait(speed + 0.1)
		end
		function tweensizeasync(uiobject, speed, finaludim)
			uiobject:TweenSize(finaludim, 'Out', 'Quint', speed)
		end
		-- Animation
		for i=0,10 do
			wait()
			rotatingLoader.ImageTransparency = rotatingLoader.ImageTransparency + .1
		end
		errorIcon.Visible = true
		tweensizeasync(errorIcon, 1, UDim2.new(0, 110,0, 113))
		for i=0,10 do
			wait()
			errorIcon.ImageTransparency = errorIcon.ImageTransparency - .1
		end
		for i=0,10 do
			wait()
			textToShowTextLabel.TextTransparency = textToShowTextLabel.TextTransparency - .1
		end
		wait(5)
		tweensizesync(allBackground,1,UDim2.new(0,0,0))
		script.Parent.Parent.Parent:Destroy()
	else
		game.Players.LocalPlayer:Kick("Unknown error!")
	end
end
coroutine.wrap(JCNTI_fake_script)()
